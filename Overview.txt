### Problem Overview:
You are working with a series of Python scripts designed to perform various types of analysis on a set of text files. These scripts are as follows:

1. **DataExtraction.py**: Extracts text content from URLs and saves them as text files.
2. **sentimentAnalysis.py**: Analyzes the sentiment of the extracted text files.
3. **AnalysisOfReadability.py**: Assesses the readability of the text files using various metrics.
4. **WordAnalysis.py**: Performs word-level analysis, such as counting syllables, personal pronouns, and computing the average word length.

The task was to integrate these scripts into a single unified script (`main.py`) that would sequentially execute each analysis, combine the results, and save them into a CSV file. During this process, several errors and challenges were encountered, each requiring careful debugging and thoughtful solutions.

### Key Challenges and Solutions:

#### 1. **Unexpected Execution of Imported Functions:**
Initially, when the functions from the other scripts were imported, they executed immediately rather than being called within the `main()` function. This was because the imported scripts contained function calls at the module level, outside of any function definitions. 

**Solution:**
To prevent this behavior, the imported scripts were modified to ensure that the main logic was only executed if the script was run directly. This was achieved by encapsulating the scriptâ€™s main logic within an `if __name__ == "__main__":` block. This way, the functions would only execute when explicitly called within the `main()` function of `main.py`.

#### 2. **Handling URL_ID with Non-Integer Values:**
During the execution of the script, a `ValueError` was encountered when attempting to convert the `URL_ID` to an integer. The error occurred because some `URL_ID` values, such as 'bctech2011', were non-integer strings.

**Solution:**
To resolve this, the conversion to an integer was avoided. Instead, the code was updated to handle `URL_ID` as a string, allowing for non-integer values to be processed correctly. This approach maintained the flexibility needed to accommodate a wider range of `URL_ID` formats.

#### 3. **Handling `NoneType` Errors During Word Analysis:**
The next issue was a `TypeError` indicating that the code was attempting to subscript a `NoneType` object. This error suggested that the `analyze_and_print_files` function in `WordAnalysis.py` was not returning the expected dictionary structure, leading to issues when trying to access the analysis results.

**Solution:**
The `analyze_and_print_files` function was revised to return a dictionary containing the analysis results for each text file. This dictionary was structured such that each filename mapped to another dictionary of metrics (e.g., total syllables, total pronouns, average word length). By ensuring that the function returned a well-structured dictionary, the script could reliably access the needed data without encountering `NoneType` errors.

#### 4. **Combining and Saving Results to CSV:**
Finally, the results from each analysis (sentiment, readability, word analysis) needed to be combined and saved into a single CSV file. This required careful iteration over each filename, extracting the relevant data from the different analysis results and compiling them into a single data structure.

**Solution:**
The `main()` function was structured to first collect all the analysis results into a list of dictionaries, with each dictionary representing a row in the output CSV. The keys of these dictionaries corresponded to the column headers in the CSV (e.g., 'POSITIVE SCORE', 'NEGATIVE SCORE', 'SYLLABLE PER WORD'). After gathering all the data, the script used Pandas to convert the list of dictionaries into a DataFrame and then saved this DataFrame as a CSV file.

### Conclusion:
The solution involved a combination of debugging and refactoring, focusing on ensuring that each function returned the correct data structures and that all components of the script worked together cohesively. By addressing the unexpected function executions, accommodating non-integer `URL_ID` values, ensuring proper data returns, and integrating all the analysis results, the script was made robust and capable of performing the full sequence of tasks as intended. This process illustrates the importance of careful error handling, thoughtful data management, and modular programming when developing complex data processing pipelines.